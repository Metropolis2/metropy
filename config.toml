# Projected coordinate system to use for metric operations (e.g., computing edges' length).
# See: https://en.wikipedia.org/wiki/Projected_coordinate_system
crs = "EPSG:2154"

# Random seed to be used for random number generators.
random_seed = 13081996

# Path to the directory where graphs should be stored.
graph_directory = "./output/graph/"

# Directory to be used to temporarily store files.
tmp_directory = "./tmp/"

# Path to the file where the imported edges are stored
# (possible extensions: parquet, geojson, fgb, shp).
raw_edges_file = "./output/road_network/edges_raw.parquet"
# Path to the file where the imported edges are stored after the cleaning process
# (possible extensions: parquet, geojson, fgb, shp).
clean_edges_file = "./output/road_network/edges_clean.parquet"

[metropolis]
# Directory where the run input files should be stored.
input_directory = "./run/"
# Format to use for the input and output files ("CSV" or "Parquet").
format = "Parquet"

# Constant time penalty, in seconds, added to the edges' travel times.
# For now, it is limited to the function of the `target_count` of edges (i.e., the number of
# incoming edges for the edge's target node).
# The `default` value is used if there is no specified value for a given edge's `target_count`.
[metropolis.travel_time_penalties]
1 = 0.0
2 = 3.0
3 = 4.0
default = 5.0

[osm]
# Path to the .osm.pbf file to use as input.
input_file = "./data/ile-de-france-240101.osm.pbf"
# Whether statistics on the imported network should be printed.
print_stats = true
# Whether graphs of the variables should be saved.
output_graphs = true
# OpenStreetMap's highway tags to import.
# See https://wiki.openstreetmap.org/wiki/Key:highway
highways = [
  "motorway",
  "trunk",
  "primary",
  "secondary",
  "tertiary",
  "motorway_link",
  "trunk_link",
  "primary_link",
  "secondary_link",
  "tertiary_link",
  "living_street",
  "unclassified",
  "residential",
  #"road",
  #"service",
]
# Array of OpenStreetMap's landuse tags to be considered as urban areas.
# See https://wiki.openstreetmap.org/wiki/Key:landuse
urban_landuse = [
  "commercial",
  "construction",
  "education",
  "industrial",
  "residential",
  "retail",
  #"grass",
  #"cemetery",
  #"basin",
  #"allotments",
  "village_green",
  #"flowerbed",
  "recreation_ground",
  "military",
  "garages",
  "religious"
]


[postprocess_network]
# Minimum number of lanes allowed on edges.
min_nb_lanes = 0.5
# Minimum speed allowed on edges (in km/h).
min_speed = 10
# Minimum length allowed on edges (in meters).
min_length = 1
# Whether the duplicate edges (edges with same source and target) should be removed.
# Only the edge with the smallest free-flow travel time is kept.
remove_duplicates = false
# Whether the network should be restricted to the largest strongly connected component of the
# underlying graph.
# Warning. If `false`, some origin-destination pairs might not be feasible.
ensure_connected = true
# If `true`, the edges are re-index after the postprocessing so that they are indexed from 0 to n-1.
reindex = false
# Whether statistics on the network should be printed.
print_stats = true
# Whether graphs of the variables should be saved.
output_graphs = true

# Default speed per roadtype, in km/h, in rural areas.
[postprocess_network.default_speed.rural]
motorway = 130
trunk = 110
primary = 80
secondary = 80
tertiary = 70
motorway_link = 70
trunk_link = 50
primary_link = 50
secondary_link = 50
tertiary_link = 50
living_street = 20
unclassified = 50
residential = 50
#road = 20
#service = 20

# Default speed per roadtype, in km/h, in urban areas.
[postprocess_network.default_speed.urban]
motorway = 130
trunk = 90
primary = 50
secondary = 50
tertiary = 30
motorway_link = 50
trunk_link = 50
primary_link = 50
secondary_link = 50
tertiary_link = 30
living_street = 20
unclassified = 30
residential = 30
#road = 20
#service = 20

# Default number of lanes per roadtype.
[postprocess_network.default_nb_lanes]
motorway = 3
trunk = 2
primary = 1
secondary = 1
tertiary = 1
motorway_link = 1
trunk_link = 1
primary_link = 1
secondary_link = 1
tertiary_link = 1
living_street = 1
unclassified = 1
residential = 1
#road = 1
#service = 1

# Default bottleneck capacity per roadtype, in PCE/h.
[postprocess_network.default_capacity]
motorway = 2000
trunk = 2000
primary = 1500
secondary = 800
tertiary = 600
motorway_link = 1500
trunk_link = 1500
primary_link = 1500
secondary_link = 800
tertiary_link = 600
living_street = 300
unclassified = 600
residential = 600
#road = 300
#service = 300

[synthetic_population]
# Path to the output directory of the synthetic population pipeline.
input_directory = "eqasim_output/"
# Name of the generated synthetic population.
# This is the prefix used in the output files.
name = "ile_de_france"
# Path to the directory where the process synthetic population files should be stored.
output_directory = "./output/synthetic_population/"

[calibration.tomtom]
# Path to the output file where the TomTom requests results are stored
# (possible extensions: parquet, geojson, fgb, shp).
output_file = "./output/calibration/tomtom_results.parquet"
# Number of routes to request.
# Note. Free TomTom API is limiting the daily number of requests to 2500.
nb_routes = 50
# Number of waypoints to use for each route request.
# Note. The number of OD pairs per route is equal to the number of waypoints minus 1 so that the
# total number of OD pairs is equal to `nb_routes * nb_waypoints - 1`.
# Note. TomTom API is limiting the number of waypoints to 150.
nb_waypoints = 10
# Number of batches to be computed in parallel.
# Ideally, the value should be the number of threads that you want to use.
# If the value is too large, TomTom API might complain about exceeding the number of requests per second.
nb_batches = 8
# Road types which cannot be selected as origin or destination node for the OD pairs.
# The edges whose `road_type` column value is equal to one of the given road type will be excluded
# from the road network prior to selecting the origin and destination nodes.
excluded_road_types = ["motorway", "motorway_link", "trunk", "trunk_link"]

[calibration.map_matching]
# Path to the output file where the map matching results are stored.
# This must be a CSV file.
output_file = "./output/calibration/fmm_results.csv"
# Number of candidates to be considered as valid match.
# Larger values provide better match quality but increase running time.
# Recommended value: 8 or more.
nb_candidates = 20
# GPS error of the GPS points, in meters.
# The GPS points are the coordinates from the routing results.
# Recommended value: 5.
gps_error = 5
# Search radius, in meters.
# Larger values are more likely to result in a positive match but increase running time.
# Recommended value: between 30 and 200.
radius = 100

[calibration.post_map_matching]
# Path to the output file where the processed map matching results are stored
# (possible extensions: parquet).
output_file = "./output/calibration/match_results.parquet"
